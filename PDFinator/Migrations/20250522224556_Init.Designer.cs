// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PDFinator.Models;

#nullable disable

namespace PDFinator.Migrations
{
    [DbContext(typeof(PDFinatorContext))]
    [Migration("20250522224556_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PDFinator.Models.PDF", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abstract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PDFs");
                });

            modelBuilder.Entity("PDFinator.Models.PDFTags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PDFId")
                        .HasColumnType("int");

                    b.Property<int>("PDFsId")
                        .HasColumnType("int");

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PDFId");

                    b.HasIndex("TagId");

                    b.ToTable("PDFTags");
                });

            modelBuilder.Entity("PDFinator.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("PDFinator.Models.PDFTags", b =>
                {
                    b.HasOne("PDFinator.Models.PDF", "PDF")
                        .WithMany("Tags")
                        .HasForeignKey("PDFId");

                    b.HasOne("PDFinator.Models.Tag", "Tag")
                        .WithMany("PDFs")
                        .HasForeignKey("TagId");

                    b.Navigation("PDF");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("PDFinator.Models.PDF", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("PDFinator.Models.Tag", b =>
                {
                    b.Navigation("PDFs");
                });
#pragma warning restore 612, 618
        }
    }
}
